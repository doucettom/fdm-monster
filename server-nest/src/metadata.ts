/* eslint-disable */
export default async () => {
    const t = {
        ["./users/dto/user.dto"]: await import("./users/dto/user.dto"),
        ["./users/dto/user-role.dto"]: await import("./users/dto/user-role.dto"),
        ["./users/user.constants"]: await import("./users/user.constants"),
        ["./settings/dto/server.settings.dto"]: await import("./settings/dto/server.settings.dto"),
        ["./settings/dto/client-settings.dto"]: await import("./settings/dto/client-settings.dto"),
        ["./settings/dto/file-clean.settings.dto"]: await import("./settings/dto/file-clean.settings.dto"),
        ["./settings/dto/settings.dto"]: await import("./settings/dto/settings.dto"),
        ["./octoprint/dto/octoprint-file.dto"]: await import("./octoprint/dto/octoprint-file.dto"),
        ["./octoprint/octoprint.constants"]: await import("./octoprint/octoprint.constants"),
        ["./shared/dtos/releases-with-latest.dto"]: await import("./shared/dtos/releases-with-latest.dto"),
        ["./shared/dtos/socket-io-message.dto"]: await import("./shared/dtos/socket-io-message.dto"),
        ["./shared/dtos/yaml-server.config.dto"]: await import("./shared/dtos/yaml-server.config.dto"),
        ["./shared/dtos/yaml-floor.dto"]: await import("./shared/dtos/yaml-floor.dto"),
        ["./shared/dtos/yaml-printer.dto"]: await import("./shared/dtos/yaml-printer.dto"),
        ["./users/dto/users-and-roles.dto"]: await import("./users/dto/users-and-roles.dto"),
        ["./users/dto/profile.dto"]: await import("./users/dto/profile.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./users/dto/create-user.dto"), { "CreateUserDto": { username: { required: true, type: () => String } } }], [import("./users/dto/register-input.dto"), { "RegisterInputDto": { name: { required: true, type: () => String }, username: { required: true, type: () => String }, password: { required: true, type: () => String } } }], [import("./users/dto/update-user.dto"), { "UpdateUserDto": { username: { required: true, type: () => String } } }], [import("./shared/dtos/id.dto"), { "IdDto": { id: { required: true, type: () => Number } } }], [import("./shared/dtos/entity.dtos"), { "EntityDto": { id: { required: true, type: () => Number } }, "FullAuditedEntityDto": { createdAt: { required: true, type: () => String }, createdBy: { required: true, type: () => Number, nullable: true }, deletedAt: { required: true, type: () => String, nullable: true }, deletedBy: { required: true, type: () => Number, nullable: true }, updatedAt: { required: true, type: () => String, nullable: true }, updatedBy: { required: true, type: () => Number, nullable: true } }, "AuditCreationDto": { createdAt: { required: true, type: () => String }, createdBy: { required: true, type: () => Number, nullable: true } }, "AuditUpdateDto": { updatedAt: { required: true, type: () => String, nullable: true }, updatedBy: { required: true, type: () => Number, nullable: true } }, "AuditDeletionDto": { deletedAt: { required: true, type: () => String, nullable: true }, deletedBy: { required: true, type: () => Number, nullable: true } } }], [import("./users/dto/user.dto"), { "UserDto": { id: { required: true, type: () => Number }, username: { required: true, type: () => String } } }], [import("./users/dto/user-role.dto"), { "UserRoleDto": { id: { required: true, type: () => Number }, role: { required: true, type: () => String }, userId: { required: true, type: () => Number } } }], [import("./users/dto/users-and-roles.dto"), { "UsersAndRolesDto": { users: { required: true, type: () => [t["./users/dto/user.dto"].UserDto] }, roles: { required: true, type: () => [t["./users/dto/user-role.dto"].UserRoleDto] } } }], [import("./users/dto/create-user-role.dto"), { "CreateUserRoleDto": { userId: { required: true, type: () => Number }, role: { required: true, enum: t["./users/user.constants"].Role } } }], [import("./settings/dto/server.settings.dto"), { "ServerSettingsDto": { requireLogin: { required: true, type: () => Boolean } } }], [import("./settings/dto/file-clean.settings.dto"), { "FileCleanSettingsDto": {} }], [import("./settings/dto/client-settings.dto"), { "ClientSettingsDto": {} }], [import("./settings/dto/settings.dto"), { "IpDto": { ip: { required: true, type: () => String }, clientIp: { required: true, type: () => String }, version: { required: true, type: () => String } }, "SettingsDto": { id: { required: true, type: () => Number }, server: { required: true, type: () => t["./settings/dto/server.settings.dto"].ServerSettingsDto }, client: { required: true, type: () => t["./settings/dto/client-settings.dto"].ClientSettingsDto }, fileClean: { required: true, type: () => t["./settings/dto/file-clean.settings.dto"].FileCleanSettingsDto } }, "SettingsWithConnectionDto": { settings: { required: true, type: () => t["./settings/dto/settings.dto"].SettingsDto }, connection: { required: true, type: () => t["./settings/dto/settings.dto"].IpDto } } }], [import("./settings/dto/create-settings.dto"), { "CreateSettingsDto": { server: { required: true, type: () => t["./settings/dto/server.settings.dto"].ServerSettingsDto } } }], [import("./settings/dto/update-file-clean.settings.dto"), { "UpdateFileCleanSettingsDto": {} }], [import("./settings/dto/update-client.settings.dto"), { "UpdateClientSettingsDto": {} }], [import("./users/dto/profile.dto"), { "ProfileDto": { id: { required: true, type: () => Number }, username: { required: true, type: () => String }, roles: { required: true, type: () => [String] } } }], [import("./octoprint/dto/octoprint-settings.dto"), { "OctoPrintSettingsDto": { api: { required: false, type: () => ({ allowCrossOrigin: { required: false, type: () => Boolean }, key: { required: false, type: () => String } }) }, appearance: { required: false, type: () => ({ closeModalsWithClick: { required: false, type: () => Boolean }, color: { required: false, type: () => String }, colorIcon: { required: false, type: () => Boolean }, colorTransparent: { required: false, type: () => Boolean }, defaultLanguage: { required: false, type: () => String }, fuzzyTimes: { required: false, type: () => Boolean }, name: { required: false, type: () => String }, showFahrenheitAlso: { required: false, type: () => Boolean }, showInternalFilename: { required: false, type: () => Boolean } }) }, devel: { required: false, type: () => ({ pluginTimings: { required: false, type: () => Boolean } }) }, feature: { required: false, type: () => ({ autoUppercaseBlacklist: { required: false, type: () => [String] }, g90InfluencesExtruder: { required: false, type: () => Boolean }, keyboardControl: { required: false, type: () => Boolean }, modelSizeDetection: { required: false, type: () => Boolean }, pollWatched: { required: false, type: () => Boolean }, printCancelConfirmation: { required: false, type: () => Boolean }, printStartConfirmation: { required: false, type: () => Boolean }, sdSupport: { required: false, type: () => Boolean }, temperatureGraph: { required: false, type: () => Boolean } }) }, folder: { required: false, type: () => ({ logs: { required: false, type: () => String }, timelapse: { required: false, type: () => String }, timelapseTmp: { required: false, type: () => String }, uploads: { required: false, type: () => String }, watched: { required: false, type: () => String } }) }, gcodeAnalysis: { required: false, type: () => ({ runAt: { required: false, type: () => String } }) }, printer: { required: false, type: () => ({ defaultExtrusionLength: { required: false, type: () => Number } }) }, scripts: { required: false, type: () => ({ gcode: { required: false, type: () => ({ afterPrintCancelled: { required: false, type: () => String }, "snippets/disable_bed": { required: false, type: () => String }, "snippets/disable_hotends": { required: false, type: () => String } }) } }) }, serial: { required: false, type: () => ({ abortHeatupOnCancel: { required: false, type: () => Boolean }, ackMax: { required: false, type: () => Number }, additionalBaudrates: { required: false, type: () => [Object] }, additionalPorts: { required: false, type: () => [Object] }, alwaysSendChecksum: { required: false, type: () => Boolean }, autoconnect: { required: false, type: () => Boolean }, baudrate: { required: false, type: () => Number }, baudrateOptions: { required: false, type: () => [Number] }, blacklistedBaudrates: { required: false, type: () => [Object] }, blacklistedPorts: { required: false, type: () => [Object] }, blockWhileDwelling: { required: false, type: () => Boolean }, blockedCommands: { required: false, type: () => [String] }, capAutoreportSdStatus: { required: false, type: () => Boolean }, capAutoreportTemp: { required: false, type: () => Boolean }, capBusyProtocol: { required: false, type: () => Boolean }, capEmergencyParser: { required: false, type: () => Boolean }, checksumRequiringCommands: { required: false, type: () => [String] }, disableSdPrintingDetection: { required: false, type: () => Boolean }, disconnectOnErrors: { required: false, type: () => Boolean }, emergencyCommands: { required: false, type: () => [String] }, exclusive: { required: false, type: () => Boolean }, externalHeatupDetection: { required: false, type: () => Boolean }, firmwareDetection: { required: false, type: () => Boolean }, helloCommand: { required: false, type: () => String }, ignoreErrorsFromFirmware: { required: false, type: () => Boolean }, ignoreIdenticalResends: { required: false, type: () => Boolean }, log: { required: false, type: () => Boolean }, logPositionOnCancel: { required: false, type: () => Boolean }, logPositionOnPause: { required: false, type: () => Boolean }, longRunningCommands: { required: false, type: () => [String] }, maxTimeoutsIdle: { required: false, type: () => Number }, maxTimeoutsLong: { required: false, type: () => Number }, maxTimeoutsPrinting: { required: false, type: () => Number }, neverSendChecksum: { required: false, type: () => Boolean }, notifySuppressedCommands: { required: false, type: () => String }, pausingCommands: { required: false, type: () => [String] }, port: { required: false, type: () => Number }, portOptions: { required: false, type: () => [Object] }, repetierTargetTemp: { required: false, type: () => Boolean }, resendRatioStart: { required: false, type: () => Number }, resendRatioThreshold: { required: false, type: () => Number }, sanityCheckTools: { required: false, type: () => Boolean }, sdAlwaysAvailable: { required: false, type: () => Boolean }, sdRelativePath: { required: false, type: () => Boolean }, sendM112OnError: { required: false, type: () => Boolean }, supportResendsWithoutOk: { required: false, type: () => String }, swallowOkAfterResend: { required: false, type: () => Boolean }, timeoutBaudrateDetectionPause: { required: false, type: () => Number }, timeoutCommunication: { required: false, type: () => Number }, timeoutCommunicationBusy: { required: false, type: () => Number }, timeoutConnection: { required: false, type: () => Number }, timeoutDetectionConsecutive: { required: false, type: () => Number }, timeoutDetectionFirst: { required: false, type: () => Number }, timeoutPositionLogWait: { required: false, type: () => Number }, timeoutSdStatus: { required: false, type: () => Number }, timeoutSdStatusAutoreport: { required: false, type: () => Number }, timeoutTemperature: { required: false, type: () => Number }, timeoutTemperatureAutoreport: { required: false, type: () => Number }, timeoutTemperatureTargetSet: { required: false, type: () => Number }, triggerOkForM29: { required: false, type: () => Boolean }, useParityWorkaround: { required: false, type: () => String }, waitForStart: { required: false, type: () => Boolean } }) }, server: { required: false, type: () => ({ allowFraming: { required: false, type: () => Boolean }, commands: { required: false, type: () => ({ serverRestartCommand: { required: false, type: () => String }, systemRestartCommand: { required: false, type: () => String }, systemShutdownCommand: { required: false, type: () => String } }) }, diskspace: { required: false, type: () => ({ critical: { required: false, type: () => Number }, warning: { required: false, type: () => Number } }) }, onlineCheck: { required: false, type: () => ({ enabled: { required: false, type: () => Boolean }, host: { required: false, type: () => String }, interval: { required: false, type: () => Number }, name: { required: false, type: () => String }, port: { required: false, type: () => Number } }) }, pluginBlacklist: { required: false, type: () => ({ enabled: { required: false, type: () => Boolean }, ttl: { required: false, type: () => Number }, url: { required: false, type: () => String } }) } }) }, system: { required: false, type: () => ({ actions: { required: false, type: () => [Object] }, events: { required: false, type: () => Object } }) }, temperature: { required: false, type: () => ({ cutoff: { required: false, type: () => Number }, profiles: { required: true, type: () => [Object] }, sendAutomatically: { required: false, type: () => Boolean }, sendAutomaticallyAfter: { required: false, type: () => Number } }) }, terminalFilters: { required: false, type: () => [Object] }, webcam: { required: false, type: () => ({ bitrate: { required: false, type: () => String }, ffmpegPath: { required: false, type: () => String }, ffmpegThreads: { required: false, type: () => Number }, ffmpegVideoCodec: { required: false, type: () => String }, flipH: { required: false, type: () => Boolean }, flipV: { required: false, type: () => Boolean }, rotate90: { required: false, type: () => Boolean }, snapshotSslValidation: { required: false, type: () => Boolean }, snapshotTimeout: { required: false, type: () => Number }, snapshotUrl: { required: false, type: () => String }, streamRatio: { required: false, type: () => String }, streamTimeout: { required: false, type: () => Number }, streamUrl: { required: false, type: () => String }, timelapseEnabled: { required: false, type: () => Boolean }, watermark: { required: false, type: () => Boolean }, webcamEnabled: { required: false, type: () => Boolean } }) } } }], [import("./shared/dtos/printer-login.dto"), { "PrinterLoginDto": { printerUrl: { required: true, type: () => String }, apiKey: { required: true, type: () => String }, context: { required: true, type: () => Object, default: null } } }], [import("./octoprint/dto/octoprint-file.dto"), { "OctoPrintFileDto": { date: { required: true, type: () => Number }, display: { required: true, type: () => String }, hash: { required: true, type: () => String }, name: { required: true, type: () => String }, origin: { required: true, type: () => Object }, path: { required: true, type: () => String }, prints: { required: true, type: () => ({ failure: { required: true, type: () => Number }, success: { required: true, type: () => Number }, last: { required: true, type: () => ({ date: { required: true, type: () => Number }, printTime: { required: true, type: () => Number }, success: { required: true, type: () => Boolean } }) } }) }, refs: { required: true, type: () => ({ download: { required: true, type: () => String }, resource: { required: true, type: () => String } }) }, size: { required: true, type: () => Number }, statistics: { required: true, type: () => ({ averagePrintTime: { required: true, type: () => ({ _default: { required: true, type: () => Number } }) }, lastPrintTime: { required: true, type: () => ({ _default: { required: true, type: () => Number } }) } }) }, type: { required: true, type: () => String }, typePath: { required: true } } }], [import("./octoprint/dto/octoprint-files.dto"), { "OctoPrintFilesDto": { files: { required: true, type: () => [t["./octoprint/dto/octoprint-file.dto"].OctoPrintFileDto] }, free: { required: true, type: () => Number }, total: { required: true, type: () => Number } } }], [import("./auth/dto/login.dto"), { "LoginDto": { username: { required: true, type: () => String }, password: { required: true, type: () => String } } }], [import("./octoprint/dto/octoprint-event.dto"), { "OctoPrintEventDto": { event: { required: true, enum: t["./octoprint/octoprint.constants"].Message }, payload: { required: true }, correlationId: { required: true, type: () => Number } } }], [import("./shared/dtos/count.dto"), { "CountDto": { count: { required: true, type: () => Number } } }], [import("./shared/dtos/releases-with-latest.dto"), { "Release": { tag_name: { required: true, type: () => String } }, "ReleasesWithLatestDto": { minimum: { required: true, type: () => t["./shared/dtos/releases-with-latest.dto"].Release }, current: { required: true, type: () => t["./shared/dtos/releases-with-latest.dto"].Release }, latest: { required: true, type: () => t["./shared/dtos/releases-with-latest.dto"].Release }, releases: { required: true, type: () => [t["./shared/dtos/releases-with-latest.dto"].Release] } } }], [import("./shared/dtos/socket-io-message.dto"), { "SocketIoMessageDto": { event: { required: true, type: () => Object } }, "TestProgressDetails": {}, "UploadProgressMessageDto": { uploads: { required: true, type: () => [Object] } }, "TestPrinterMessageDto": { testPrinter: { required: true, type: () => Object }, testProgress: { required: true, type: () => t["./shared/dtos/socket-io-message.dto"].TestProgressDetails } }, "PluginPushMessageDto": { room: { required: false, type: () => String }, plugin: { required: true, type: () => String } }, "ModulePushMessageDto": { room: { required: false, type: () => String }, module: { required: true, type: () => String } }, "InitRequestMessageDto": { floors: { required: true, type: () => [Object] }, printers: { required: true, type: () => [Object] }, connections: { required: true, type: () => [Object] }, jobs: { required: true, type: () => [Object] }, printerStates: { required: true, type: () => [Object] }, materials: { required: true, type: () => [Object] } }, "JobsUpdateMessageDto": { updatedJobs: { required: true, type: () => [Object] }, removedJobIds: { required: true, type: () => [Number] } }, "FloorsUpdateMessageDto": { updatedFloors: { required: true, type: () => [Object] }, removedFloorIds: { required: true, type: () => [Number] } }, "PrintersUpdateMessageDto": { updatedPrinters: { required: true, type: () => [Object] }, removedPrinterIds: { required: true, type: () => [Number] } }, "MaterialsUpdateMessageDto": { updatedMaterials: { required: true, type: () => [Object] }, removedMaterialPrinterIds: { required: true, type: () => [Number] } }, "PrinterStatesUpdateMessageDto": { updatedStates: { required: true, type: () => [Object] }, removedStateIds: { required: true, type: () => [Number] } }, "ConnectionStatesUpdateMessageDto": { updatedConnectionStates: { required: true, type: () => [Object] }, removedConnectionStateIds: { required: true, type: () => [Number] } } }], [import("./shared/dtos/update-client-dist.dto"), { "UpdateClientDistDto": { downloadRelease: { required: false, type: () => String } } }], [import("./shared/dtos/yaml-server.config.dto"), { "YamlServerConfigDto": { requireLogin: { required: true, type: () => Boolean, default: true } } }], [import("./shared/dtos/yaml-printer.dto"), { "YamlPrinterDto": { name: { required: true, type: () => String }, printerUrl: { required: true, type: () => String }, apiKey: { required: true, type: () => String }, enabled: { required: true, type: () => Object, default: true }, disabledReason: { required: false, type: () => String }, floorNumber: { required: true, type: () => Number, minimum: 0 }, posX: { required: true, type: () => Number, minimum: 0 }, posY: { required: true, type: () => Number, minimum: 0 } } }], [import("./shared/dtos/yaml-floor.dto"), { "YamlFloorDto": { name: { required: true, type: () => String }, floorNumber: { required: true, type: () => Number, minimum: 0 } } }], [import("./shared/dtos/yaml-config.dto"), { "YamlConfigDto": { server: { required: false, type: () => t["./shared/dtos/yaml-server.config.dto"].YamlServerConfigDto }, floors: { required: false, type: () => [t["./shared/dtos/yaml-floor.dto"].YamlFloorDto] }, printers: { required: false, type: () => [t["./shared/dtos/yaml-printer.dto"].YamlPrinterDto] } } }]], "controllers": [[import("./shared/readonly-crud.controller"), { "ReadonlyCrudController": { "get": {}, "list": {} } }], [import("./shared/crud.controller"), { "CrudController": { "create": {}, "delete": {}, "update": {} } }], [import("./users/user.controller"), { "UserController": { "usersWithRoles": { type: t["./users/dto/users-and-roles.dto"].UsersAndRolesDto }, "create": { type: t["./users/dto/user.dto"].UserDto }, "getUserRoles": {} } }], [import("./settings/settings.controller"), { "SettingsController": { "get": { type: t["./settings/dto/settings.dto"].SettingsDto }, "getWithConnection": { type: t["./settings/dto/settings.dto"].SettingsWithConnectionDto }, "updateClientSettings": { type: t["./settings/dto/settings.dto"].SettingsDto }, "updateFileCleanSettings": { type: t["./settings/dto/settings.dto"].SettingsDto } } }], [import("./users/profile.controller"), { "ProfileController": { "getProfile": { type: t["./users/dto/profile.dto"].ProfileDto } } }], [import("./health/health.controller"), { "HealthController": { "apiStatus": {}, "checkDatabaseConnected": {}, "checkApiStatus": {} } }], [import("./admin/admin.controller"), { "AdminController": { "cacheKeys": { type: [String] } } }], [import("./auth/auth.controller"), { "AuthController": { "login": {} } }], [import("./shared/cache-crud.controller"), { "CacheCrudControllerHost": { "get": {}, "list": {}, "create": {}, "delete": {}, "update": {} } }], [import("./shared/module-disabled.controller"), { "ModuleDisabledController": { "disabledModule": {}, "moduleEnabled": {} } }]] } };
};